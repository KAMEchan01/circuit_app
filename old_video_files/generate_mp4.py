#!/usr/bin/env python3
"""
CIRCUITËß£Ë™¨ÂãïÁîª„ÅÆMP4„Éï„Ç°„Ç§„É´ÁîüÊàê
imageio-ffmpeg„Çí‰ΩøÁî®„Åó„Å¶ÂÆüÈöõ„ÅÆMP4„Çí‰ΩúÊàê
"""
import os
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import imageio
import tempfile
import shutil

def create_circuit_mp4():
    """CIRCUITËß£Ë™¨ÂãïÁîª„ÅÆMP4„Çí‰ΩúÊàê"""
    print("üé¨ Creating CIRCUIT explanation MP4 video...")
    
    # „Éë„ÇπË®≠ÂÆö
    base_dir = "/Users/kamechan/claude_code/circuit"
    final_dir = os.path.join(base_dir, "videos", "final")
    os.makedirs(final_dir, exist_ok=True)
    
    # ÂãïÁîªË®≠ÂÆö
    width, height = 1280, 720
    fps = 2  # „Éï„É¨„Éº„É†„É¨„Éº„Éà
    duration = 60  # Á∑èÊôÇÈñìÔºàÁßíÔºâ
    
    # Âá∫Âäõ„Éï„Ç°„Ç§„É´
    output_mp4 = os.path.join(final_dir, "circuit_explanation.mp4")
    
    print(f"üì± Video specs: {width}x{height}, {fps}fps, {duration}s")
    
    try:
        # „Éï„É¨„Éº„É†„ÇíÁîüÊàê
        frames = generate_video_frames(width, height, fps, duration)
        
        # MP4„Å®„Åó„Å¶‰øùÂ≠ò
        print("üíæ Saving MP4 file...")
        imageio.mimsave(output_mp4, frames, fps=fps, quality=8, macro_block_size=1)
        
        print(f"‚úÖ MP4 video created successfully!")
        print(f"üìÅ File: {output_mp4}")
        
        # „Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíË°®Á§∫
        if os.path.exists(output_mp4):
            file_size = os.path.getsize(output_mp4) / (1024 * 1024)  # MB
            print(f"üìä File size: {file_size:.2f} MB")
        
        return output_mp4
        
    except Exception as e:
        print(f"‚ùå Error creating MP4: {e}")
        return None

def generate_video_frames(width, height, fps, duration):
    """ÂãïÁîª„Éï„É¨„Éº„É†„ÇíÁîüÊàê"""
    
    # Ëâ≤ÂÆöÁæ©
    colors = {
        'bg': (30, 60, 114),      # „ÉÄ„Éº„ÇØ„Éñ„É´„Éº
        'red': (255, 107, 107),   # „É°„Ç§„É≥„É¨„ÉÉ„Éâ
        'teal': (78, 205, 196),   # „Ç¢„ÇØ„Çª„É≥„Éà„ÉÜ„Ç£„Éº„É´
        'white': (255, 255, 255), # „Éõ„ÉØ„Ç§„Éà
    }
    
    # „Ç∑„Éº„É≥ÂÆöÁæ©
    scenes = [
        {
            'title': 'CIRCUIT',
            'subtitle': 'F1„ÉÜ„Éº„Éû„ÅÆÁ≠ã„Éà„É¨„Ç¢„Éó„É™',
            'duration': 10,  # 10Áßí
            'color': colors['red']
        },
        {
            'title': '„Çø„Éê„ÇøÂºè„ÉØ„Éº„ÇØ„Ç¢„Ç¶„Éà',
            'subtitle': '20ÁßíÈÅãÂãï + 10Áßí‰ºëÊÜ© √ó 8„Çª„ÉÉ„Éà',
            'duration': 15,  # 15Áßí
            'color': colors['teal']
        },
        {
            'title': '4ÂàÜ„ÅßÂÖ®Ë∫´„Éà„É¨„Éº„Éã„É≥„Ç∞',
            'subtitle': '6Á®ÆÈ°û„ÅÆ„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„Çí„É©„É≥„ÉÄ„É†ÈÅ∏Êäû',
            'duration': 15,  # 15Áßí
            'color': colors['red']
        },
        {
            'title': 'ÁøíÊÖ£Âåñ„Çµ„Éù„Éº„Éà',
            'subtitle': 'F1„É¨„Éº„Çµ„Éº„ÅÆ„Çà„ÅÜ„Å´ÊØéÊó•ÂÆåËµ∞',
            'duration': 10,  # 10Áßí
            'color': colors['teal']
        },
        {
            'title': '‰ªä„Åô„ÅêÂßã„ÇÅ„Çà„ÅÜÔºÅ',
            'subtitle': 'circuit-workout.com',
            'duration': 10,  # 10Áßí
            'color': colors['red']
        }
    ]
    
    frames = []
    total_frames = fps * duration
    
    print(f"üéûÔ∏è Generating {total_frames} frames...")
    
    # „Éï„Ç©„É≥„ÉàË®≠ÂÆö
    try:
        title_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttc", 72)
        subtitle_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttc", 36)
    except:
        title_font = ImageFont.load_default()
        subtitle_font = ImageFont.load_default()
    
    # ÂêÑ„Ç∑„Éº„É≥„ÅÆ„Éï„É¨„Éº„É†„ÇíÁîüÊàê
    frame_count = 0
    
    for scene_idx, scene in enumerate(scenes):
        scene_frames = fps * scene['duration']
        
        print(f"  Scene {scene_idx + 1}: {scene['title']} ({scene_frames} frames)")
        
        for frame_in_scene in range(scene_frames):
            if frame_count >= total_frames:
                break
                
            # ÁîªÂÉè„Çí‰ΩúÊàê
            img = Image.new('RGB', (width, height), colors['bg'])
            draw = ImageDraw.Draw(img)
            
            # „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ËÉåÊôØ
            for y in range(height):
                shade = int(50 * (1 - y / height))
                bg_color = (
                    min(255, colors['bg'][0] + shade),
                    min(255, colors['bg'][1] + shade),
                    min(255, colors['bg'][2] + shade)
                )
                draw.line([(0, y), (width, y)], fill=bg_color)
            
            # „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûúÔºà„Éï„Çß„Éº„Éâ„Ç§„É≥Ôºâ
            alpha = min(1.0, frame_in_scene / (fps * 2))  # 2Áßí„Åß„Éï„Çß„Éº„Éâ„Ç§„É≥
            
            # „Çø„Ç§„Éà„É´ÊèèÁîª
            title_bbox = draw.textbbox((0, 0), scene['title'], font=title_font)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (width - title_width) // 2
            
            # Ëâ≤„Å´„Ç¢„É´„Éï„Ç°„ÇíÈÅ©Áî®
            title_color = tuple(int(c * alpha) for c in scene['color'])
            
            draw.text((title_x, 250), scene['title'], 
                     fill=title_color, font=title_font)
            
            # „Çµ„Éñ„Çø„Ç§„Éà„É´ÊèèÁîª
            subtitle_bbox = draw.textbbox((0, 0), scene['subtitle'], font=subtitle_font)
            subtitle_width = subtitle_bbox[2] - subtitle_bbox[0]
            subtitle_x = (width - subtitle_width) // 2
            
            subtitle_color = tuple(int(c * alpha) for c in colors['white'])
            
            draw.text((subtitle_x, 350), scene['subtitle'],
                     fill=subtitle_color, font=subtitle_font)
            
            # ÈÄ≤Êçó„Éê„Éº
            progress_width = int(width * 0.6)
            progress_x = (width - progress_width) // 2
            progress_y = height - 80
            
            # ËÉåÊôØ„Éê„Éº
            draw.rectangle([progress_x, progress_y, progress_x + progress_width, progress_y + 10], 
                          fill=(100, 100, 100))
            
            # ÈÄ≤Êçó„Éê„Éº
            total_progress = frame_count / total_frames
            filled_width = int(progress_width * total_progress)
            draw.rectangle([progress_x, progress_y, progress_x + filled_width, progress_y + 10], 
                          fill=colors['teal'])
            
            # ÁîªÂÉè„ÇínumpyÈÖçÂàó„Å´Â§âÊèõ
            frame_array = np.array(img)
            frames.append(frame_array)
            
            frame_count += 1
        
        if frame_count >= total_frames:
            break
    
    print(f"  Generated {len(frames)} frames total")
    return frames

if __name__ == "__main__":
    try:
        create_circuit_mp4()
    except ImportError as e:
        print(f"‚ùå Required library missing: {e}")
        print("Installing required packages...")
        import subprocess
        subprocess.run(["python3", "-m", "pip", "install", "imageio[ffmpeg]", "pillow"], check=True)
        create_circuit_mp4()