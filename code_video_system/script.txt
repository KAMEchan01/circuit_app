# インポート部分（行番号1-3）
[実際の表示時間: 7.4秒]
[表示行: 1-3]
[画像ファイル: pic/scene01_import.png]
[音声ファイル: audio/scene01_narration.mp3]

このプログラムは、PILライブラリを使用した画像リサイズツールです。
必要なライブラリとして、PILのImageモジュール、osモジュール、sysモジュールをインポートしています。

# 設定項目（行番号5-10）
[実際の表示時間: 17.7秒]
[表示行: 5-10]
[画像ファイル: pic/scene02_settings.png]
[音声ファイル: audio/scene02_narration.mp3]

設定項目では、プログラムの動作をカスタマイズできます。
sourceFolderで入力画像のフォルダを指定し、outputFolderで出力先を設定します。
outputExtentionでは、pngまたはjpg形式を選択できます。
sizeは、リサイズ時の基準となるピクセル数で、デフォルトは700ピクセルです。
modeでは、リサイズするか元のサイズを維持するかを選択できます。

# 計算関数（行番号13-41）
[実際の表示時間: 16.5秒]
[表示行: 13-41]
[画像ファイル: pic/scene03_calculate_resize.png]
[音声ファイル: audio/scene03_narration.mp3]

calculate_resize_dimensions関数は、画像の縦横比を維持しながら適切なリサイズサイズを計算します。
リサイズモードの場合、横長画像は幅を基準に、縦長画像は高さを基準にサイズを調整します。
これにより、画像の変形を防ぎながら、指定されたサイズに収まるように処理します。
オリジナルモードでは、元の画像サイズをそのまま返します。

# リサイズ関数（行番号44-56）
[実際の表示時間: 9.9秒]
[表示行: 44-56]
[画像ファイル: pic/scene04_resize_image.png]
[音声ファイル: audio/scene04_narration.mp3]

resize_image関数は、実際に画像をリサイズする処理を行います。
PILのresize メソッドを使用して、指定された幅と高さに画像を変更します。
この関数はシンプルですが、プログラムの中核となる処理です。

# 設定値検証（行番号59-75）
[実際の表示時間: 16.6秒]
[表示行: 59-75]
[画像ファイル: pic/scene05_validation.png]
[音声ファイル: audio/scene05_narration.mp3]

プログラムの安全性を確保するため、設定値の検証を行います。
出力形式がpngまたはjpgであることを確認し、
処理モードがresizeまたはoriginalであることをチェックします。
サイズが正の整数であることも検証し、
入力フォルダが存在することを確認します。
エラーがある場合は、分かりやすいメッセージを表示して終了します。

# 出力フォルダ作成（行番号77-83）
[実際の表示時間: 6.6秒]
[表示行: 77-83]
[画像ファイル: pic/scene06_output_folder.png]
[音声ファイル: audio/scene06_narration.mp3]

出力フォルダが存在しない場合は、自動的に作成します。
エラーハンドリングにより、フォルダ作成に失敗した場合も適切に処理します。

# メインループ開始（行番号85-100）
[実際の表示時間: 9.6秒]
[表示行: 85-100]
[画像ファイル: pic/scene07_main_loop_start.png]
[音声ファイル: audio/scene07_narration.mp3]

処理した画像数とエラー数をカウントする変数を初期化します。
入力フォルダ内のファイルリストを取得し、
jpg、jpeg、png、bmp、gif形式の画像ファイルのみを処理対象とします。

# 画像処理（行番号102-134）
[実際の表示時間: 19.8秒]
[表示行: 102-134]
[画像ファイル: pic/scene08_image_processing.png]
[音声ファイル: audio/scene08_narration.mp3]

各画像ファイルに対して以下の処理を実行します。
まず、画像を読み込み、CMYK形式の場合はRGB形式に変換します。
ファイル名から拡張子を除去し、処理中であることを表示します。
calculate_resize_dimensions関数でリサイズ後のサイズを計算し、
resize_image関数で実際にリサイズを実行します。
最後に、指定された形式で画像を保存し、品質は90に設定しています。

# エラーハンドリング（行番号136-141）
[実際の表示時間: 10.7秒]
[表示行: 136-141]
[画像ファイル: pic/scene09_error_handling.png]
[音声ファイル: audio/scene09_narration.mp3]

画像処理中に発生する可能性のあるエラーを適切に処理します。
IOErrorは画像の読み込みや保存に関するエラーを、
その他の例外は予期しないエラーをキャッチします。
エラーが発生しても、他の画像の処理は継続されます。

# 結果サマリー（行番号143-148）
[実際の表示時間: 8.7秒]
[表示行: 143-148]
[画像ファイル: pic/scene10_summary.png]
[音声ファイル: audio/scene10_narration.mp3]

すべての処理が完了したら、結果のサマリーを表示します。
処理に成功した画像数と、エラーが発生した画像数を報告し、
ユーザーが処理結果を一目で確認できるようにしています。